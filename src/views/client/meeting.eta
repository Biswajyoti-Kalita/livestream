<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Nextbroadcast Media</title>
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Your existing custom styles can be kept */
    .hide {
        display: none !important;
    }
  </style>
  <!-- Remove Bootstrap if you're fully switching to Tailwind -->
  <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/js/bootstrap.bundle.min.js"></script> -->
    <!-- Add Socket.IO client library -->
  <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-900 text-white">
  <div class="container mx-auto p-4">
    <header class="mb-6">
      <h1 class="text-3xl font-bold text-center">Nextbroadcast Media</h1>
    </header>

    <!-- Main Content Area with Flexbox Layout -->
    <div class="flex flex-col md:flex-row gap-4" id="streamDiv" >
      <!-- Left Side - Video Section -->
      <div class="w-full md:w-2/3">
        <div id="streamInfo" class="mb-4">
          <div id="status" class="text-xl font-semibold">ðŸ”µ Waiting for stream...</div>
        </div>

        <div id="video-container" class="hidden">
          <video id="video" loop="false" controls autoplay class="w-full rounded-lg border-4 border-gray-700"></video>
        </div>
      </div>

      <!-- Right Side - Chat Section -->
      <div id="chatSection" class="w-full md:w-1/3 bg-gray-800 rounded-lg p-4 flex flex-col h-[500px]">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-bold">Live Chat</h2>
          <div class="bg-green-500 text-white px-3 py-1 rounded-full text-sm">
            <span id="activeUsers">0</span> active
          </div>
        </div>
        
        <!-- Chat Messages Container -->
        <div id="chatMessages" class="flex-grow overflow-y-auto mb-4 space-y-3 p-2">
          <!-- Messages will be added here via JavaScript -->
          <div class="message bg-gray-700 p-2 rounded-lg">
            <div class="flex items-center gap-2">
              <span class="font-bold text-green-400">System:</span>
            </div>
            <p>Welcome to the live stream! Chat with others while watching.</p>
          </div>
        </div>
        
        <!-- Chat Input Form -->
        <div class="mt-auto">
          <form id="messageForm" class="flex gap-2">
            <input 
              type="text" 
              id="messageInput" 
              placeholder="Type your message..." 
              class="flex-grow bg-gray-700 rounded-lg p-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
            <button 
              type="submit" 
              class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg"
            >
              Send
            </button>
          </form>
        </div>
      </div>
    </div>

    <!-- Meeting Join Form -->
    <div id="nonStreamDiv" class="hidden mt-8">
      <div class="max-w-md mx-auto bg-gray-800 p-6 rounded-lg">
        <h2 class="text-xl font-bold mb-4">Join Meeting</h2>
        <div class="space-y-4">
          <div>
            <label for="meetingIdControlInput" class="block text-sm font-medium mb-1">Meeting ID</label>
            <input 
              type="text" 
              class="w-full bg-gray-700 rounded-lg p-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500" 
              id="meetingIdControlInput" 
              placeholder="Enter meeting ID"
            >
          </div>
          <div class="flex items-center justify-between">
            <button 
              class="bg-blue-600 hover:bg-blue-700 px-6 py-2 rounded-lg" 
              onclick="join()"
            >
              Join
            </button>
            <span id="meetingStatus" class="text-sm text-gray-300"></span>
          </div>
        </div>
      </div>
    </div>
  </div>


  <script>
    // Keep your existing JavaScript
    let meetingId = "<%= it.meeting ? it.meeting.uuid : '' %>";
    let streamUrl = `/live/${meetingId}/index.m3u8`;
    const video = document.getElementById('video');
    const videoContainer = document.getElementById('video-container');
    const status = document.getElementById('status');
    let timer = null, meetingTimer = null;
    let isStreaming = false;

    // Chat functionality
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    const chatMessages = document.getElementById('chatMessages');
    const activeUsersElement = document.getElementById('activeUsers');
    
    let activeUsers = 0; // Initial count
    let socket; // WebSocket connection

    function showStreamDiv(){
        document.getElementById("streamDiv").classList.remove("hidden");
        document.getElementById("nonStreamDiv").classList.add("hidden");    
    }

    function showNonStreamDiv(){
        document.getElementById("streamDiv").classList.add("hidden");
        document.getElementById("nonStreamDiv").classList.remove("hidden");    
    }

    if(meetingId){
      document.getElementById("meetingIdControlInput").value = meetingId;
    }
    showNonStreamDiv();

    function getPublicPath(){
      console.log("get public path");
      fetch(`/client/event/public?id=${meetingId}`).then(res => res.json()).then(res => {
        console.log(res);
        if(res.filepath){
          document.getElementById("video").src = res.filepath;
        }
      });
    }

    function checkMeeting(){
        fetch(`/client/event/${meetingId}`).then((res) =>res.json()).then((res) => {
            console.log(res);
            const status = parseInt(res['status']);
            if(status == 0){
              console.log("meeting has not yet started");
              document.getElementById("meetingStatus").innerHTML = `Meeting has not yet started`
            }else if(status == 1) {
              if(meetingTimer)
                clearInterval(meetingTimer);
              timer = setInterval(checkStream, 5000);
              showStreamDiv();
              initializeChat(); // Connect to chat when meeting is active
            }else if(status == 2){
              if(meetingTimer)
                clearInterval(meetingTimer);
              showStreamDiv();
              videoContainer.classList.remove('hidden');
              document.getElementById("streamInfo").classList.add("hidden");
              getPublicPath();
              initializeChat(); // Connect to chat when meeting is recorded
            }
        });
    }

    function checkStream() {
      streamUrl = `/live/${meetingId}/index.m3u8`;
      fetch(streamUrl, { method: 'HEAD' })
        .then(res => {
          if (res.ok && !isStreaming) {
            status.innerText = "ðŸ”´ Live now!";
            videoContainer.classList.remove('hidden');
            startPlayer();
            isStreaming = true;
            clearInterval(timer);
          } else if (!res.ok && isStreaming) {
            status.innerText = "âš« Stream ended.";
            videoContainer.classList.add('hidden');
            isStreaming = false;
            clearInterval(timer);
          } else if (!res.ok) {
            status.innerText = "ðŸ”µ Waiting for stream...";
          }
        })
        .catch(err => {
          status.innerText = "âš« Offline or unreachable.";
          videoContainer.classList.add('hidden');
          isStreaming = false;
        });
    }

    function startPlayer() {
      if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(streamUrl);
        hls.attachMedia(video);
      } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.src = streamUrl;
      }
    }

    function join(){
        const meetingInputValue = document.getElementById("meetingIdControlInput").value;
        if(meetingInputValue){
            meetingId = meetingInputValue;         
            checkMeeting();
            checkMeetingWithInterval();
        }else {
            alert("Please enter the meeting ID");
        }
    }

    // Initialize WebSocket connection for chat
    function initializeChat() {
      getPreviousMessage();

      // Connect to Socket.IO
      socket = io('/chat');
      
      // Join the meeting room
      socket.emit('join_room', meetingId);
      
      // Listen for user count updates
      socket.on('users_update', (data) => {
        activeUsers = data.count;
        activeUsersElement.textContent = activeUsers;
      });
      
      // Listen for chat messages
      socket.on('chat_message', (data) => {
        addChatMessage(data.username, data.message, data.timestamp);
      });
      
      // Handle connection errors
      socket.on('connect_error', () => {
        addSystemMessage("Error connecting to chat");
      });
      
      // Handle disconnection
      socket.on('disconnect', () => {
        addSystemMessage("Disconnected from chat");
      });
      
      // Handle reconnection
      socket.on('reconnect', () => {
        addSystemMessage("Reconnected to chat");
        socket.emit('join_room', meetingId);
      });

    }

    function getPreviousMessage(){
      fetch("/client/api/messages/"+meetingId).then((res) => res.json()).then(res => {
        console.log("messages ",res, );
        if(res && res['messages'] && Array.isArray(res['messages']) && res['messages'].length){
          for(let i=0;i<res['messages'].length;i++){
             addChatMessage(res['messages'][i]['user_uid'], res['messages'][i]['message'], new Date(res['messages'][i]['createdAt']))
          }
        }
      });
    }

    // Add a chat message to the UI
    function addChatMessage(username, message, timestamp) {
    console.log("addChatMessage ", {username, message, timestamp});
      const messageElement = document.createElement('div');
      messageElement.className = 'message bg-gray-700 p-2 rounded-lg';
      
      const time = new Date(timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
      
      messageElement.innerHTML = `
        <div class="flex items-center justify-between">
          <span class="font-bold text-blue-400">${username}</span>
          <span class="text-xs text-gray-400">${time}</span>
        </div>
        <p>${message}</p>
      `;
      
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Add a system message to the chat
    function addSystemMessage(message) {
      const messageElement = document.createElement('div');
      messageElement.className = 'message bg-gray-700 p-2 rounded-lg';
      
      messageElement.innerHTML = `
        <div class="flex items-center gap-2">
          <span class="font-bold text-green-400">System:</span>
        </div>
        <p>${message}</p>
      `;
      
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Handle message form submission
    messageForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const message = messageInput.value.trim();
      if (message && socket && socket.connected) {
        // Send via Socket.IO
        socket.emit('chat_message', { message: message });
        
        // Clear input after sending
        messageInput.value = '';
      }
    });
    


    function checkMeetingWithInterval(){
      
      if(meetingTimer)
        clearInterval(meetingTimer);

      if(meetingId) {
          meetingTimer = setInterval(checkMeeting, 5000);
      }    
    }

    // Poll every 5 seconds if meeting ID exists
  </script>
</body>
</html>