<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Nextbroadcast Media</title>
  <link rel="icon" type="image/x-icon" href="https://nextbroadcast.media/wp-content/uploads/2022/12/BROADCAST_BLACK.png">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/luxon@3.4.3/build/global/luxon.min.js"></script>
  <!-- Add Heroicons (for icons) -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.min.css">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'nb-primary': '#3B82F6', // Brand blue
            'nb-dark': '#1D4ED8',    // Darker blue
            'nb-medium': '#F8FAFC',  // Light background
            'nb-light': '#F1F5F9',   // Even lighter
            'nb-text': '#0F172A',    // Dark text
            'nb-text-light': '#475569', // Medium text
            'nb-accent': '#F97316',  // Orange accent
            'nb-border': '#E2E8F0',  // Border color
          },
        }
      }
    }
  </script>
  <style>
    /* Custom styles */
    body {
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      background: linear-gradient(to bottom, #F8FAFC, #F1F5F9);
      min-height: 100vh;
    }
    
    .hide {
      display: none !important;
    }

    .gradient-text {
      background: linear-gradient(45deg, #C33764, #2535B4);
      color: transparent;
      -webkit-background-clip: text;
    }

    .gradient-text-s {
      background: linear-gradient(45deg, #37AAC3, #254DB4);
      color: transparent;
      -webkit-background-clip: text;
    }

    .color-p {
      color: #101828;
    }

    .color-s {
      color: #344054;
    }
    
    .chat-collapsed {
      width: 60px !important;
      transition: width 0.3s ease;
    }
    
    .chat-expanded {
      transition: width 0.3s ease;
    }
    
    .video-with-chat {
      transition: width 0.3s ease;
    }
    
    .video-full {
      transition: width 0.3s ease;
    }
    
    /* Chat message animations */
    @keyframes messageIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .message {
      animation: messageIn 0.3s ease forwards;
    }
    
    /* Video container enhancements */
    .video-shadow {
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }
    
    /* Custom scrollbar */
    .nb-scrollbar::-webkit-scrollbar {
      width: 6px;
    }
    
    .nb-scrollbar::-webkit-scrollbar-track {
      background-color: #F1F5F9;
      border-radius: 100px;
    }
    
    .nb-scrollbar::-webkit-scrollbar-thumb {
      background-color: #CBD5E1;
      border-radius: 100px;
    }
    /* Branded button styles */
    .nb-button {
      background: linear-gradient(280.71deg,#2535b4 15.9%,#c33764 88.58%);
      transition: all 0.2s ease;
    }
    
    .nb-button:hover {
      background: linear-gradient(280.71deg,#2535b4 15.9%,#c33764 88.58%);
      transform: translateY(-1px);
      box-shadow: 0 4px 6px -1px rgba(59, 130, 246, 0.2);
    }
    
    /* Logo animation */
    .logo-pulse {
      animation: pulse 4s infinite;
    }
    
    @keyframes pulse {
      0% { opacity: 0.8; }
      50% { opacity: 1; }
      100% { opacity: 0.8; }
    }
    /* Countdown timer */
    .countdown-item {
      background: #F6F6F6;
      border: 1px solid #E2E8F0;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05);
    }
  </style>
  <style>
  /* Mobile tab switching styles */
  .mobile-tabs {
    display: none;
  }
  
  @media (max-width: 768px) {
    .mobile-tabs {
      display: flex;
    }
    
    .tab-active {
      border-bottom: 3px solid #3B82F6;
      color: #3B82F6;
      font-weight: 600;
    }
    
    /* Full height video and chat on mobile */
    #videoSection, #chatSection {
      height: calc(100vh - 200px);
      max-height: none;
    }
    
    #video-container video {
      height: calc(100vh - 250px);
      object-fit: contain;
    }
    
    #chatMessages {
      height: calc(100vh - 300px);
    }
  }
</style>
  <!-- Add Socket.IO client library -->
  <script src="/socket.io/socket.io.js"></script>

  <link href="https://vjs.zencdn.net/8.0.4/video-js.css" rel="stylesheet" />
  <script src="https://vjs.zencdn.net/8.0.4/video.min.js"></script>
</head>
<body class="text-nb-text bg-white">
  <header class="mb-8 mt-8 pl-12 flex justify-start items-center md:absolute top-0">
    <div class="flex items-center space-x-2">
      <img src="/img/nbm.png" />
    </div>
  </header>
  <div class="w-full bg-white">
    <!-- Main Content Area with Flexbox Layout -->
    <div class="flex flex-col md:flex-row gap-6 p-8 mt-20" id="streamDiv">
      <div class="mobile-tabs md:hidden w-full mb-4 border-b border-nb-border">
        <button id="videoTab" class="w-1/2 p-3 text-center tab-active" onclick="showVideoTab()">
          <i class="ri-video-line mr-1"></i> Video
        </button>
        <button id="chatTab" class="w-1/2 p-3 text-center" onclick="showChatTab()">
          <i class="ri-chat-1-line mr-1"></i> Chat <span class="bg-green-500 text-white text-xs px-1.5 py-0.5 rounded-full" id="mobileActiveUsers">0</span>
        </button>
      </div>
      <!-- Left Side - Video Section -->
      <div id="videoSection" class="w-full md:w-2/3 video-with-chat transition-all duration-300">
        <div id="streamInfo" class="mb-4 flex items-center">
          <% /* <div class="w-3 h-3 bg-blue-500 rounded-full mr-2 animate-pulse"></div> */ %>
          <div id="status" style="display:none;" class="text-xl hidden font-semibold text-nb-dark">Waiting for stream to begin...</div>
        </div>
        <div class="">
          <h6 id="meetingTitle2" class="gradient-text text-md md:text-4xl"></h6>
          <h6 id="meetingDescription2" class=" color-s text-sm md:text-base"></h6>
        </div>
        <div id="video-container" class="hidden mt-4">
          <% /* <img src="https://nextbroadcast.media/wp-content/uploads/2022/12/BROADCAST_BLACK.png" class="h-[50px]" /> */ %>
          <video 
            id="video" 
            loop="false" 
            muted 
            controls 
            autoplay 
            class="max-h-[600px] min-h-[450px]  w-full rounded-xl border border-nb-border video-shadow video-js"
            preload="auto"
            data-setup='{}'
            >
            
          </video>
          <div class="mt-4">
            <h6 class="color-s text-md md:text-4xl font-bold">Agenda</h6>
            <hr class="my-4" />
            <p class=" text-base font-bold" id="meetingAgenda2">

            </p>
          </div>
          <!-- Video controls overlay can be added here if needed -->
          <div class="mt-4 hidden flex justify-between items-center px-1">
            <div class="text-sm text-nb-text-light">
              <span class="text-nb-primary">Live Stream</span>
            </div>
            <div class="flex items-center space-x-2">
              <button class="p-2 rounded-full bg-nb-light hover:bg-gray-200 transition-colors text-nb-text-light">
                <i class="ri-fullscreen-line text-lg"></i>
              </button>
              <button class="p-2 rounded-full bg-nb-light hover:bg-gray-200 transition-colors text-nb-text-light">
                <i class="ri-settings-3-line text-lg"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
      <!-- Right Side - Chat Section with Collapse Button -->
      <div id="chatSection" class="w-full md:w-1/3 bg-white rounded-xl border border-nb-border shadow-lg flex flex-col max-h-[600px] chat-expanded relative transition-all duration-300">
        <!-- Collapse/Expand Button - Positioned on the left edge -->
        <button id="toggleChatBtn" class="absolute -left-4 top-1/2 transform -translate-y-1/2 bg-white text-nb-text-light w-8 h-20 rounded-l-lg flex items-center justify-center shadow-lg hover:bg-gray-100 transition-colors z-10 focus:outline-none border border-nb-border border-r-0">
          <i class="ri-arrow-right-s-line text-xl" id="chatCollapseIcon"></i>
        </button>
        
        <!-- Chat Header -->
        <div id="chatHeader" class="flex justify-between items-center p-4 border-b border-nb-border">
          <h2 class="text-xl font-bold text-nb-dark">Live Chat</h2>
          <div class="bg-gradient-to-r from-green-500 to-green-600 text-white px-3 py-1 rounded-full text-sm flex items-center">
            <i class="ri-user-line mr-1"></i>
            <span id="activeUsers" class="mr-1">0</span> active
          </div>
        </div>
        
        <!-- Chat Content -->
        <div id="chatContent" class="flex-grow mb-2 flex flex-col p-4" style="max-height: 90%; min-height: 350px;">
          <!-- Chat Messages Container -->
          <div id="chatMessages" class="flex-grow overflow-y-auto mb-4 space-y-3 p-2 nb-scrollbar">
            <!-- Messages will be added here via JavaScript -->
            <% /* <div class="message bg-nb-light p-3 rounded-lg border border-nb-border">
              <div class="flex items-center gap-2">
                <span class="font-bold text-green-600">System:</span>
              </div>
              <p class="text-nb-text">Welcome to the live stream! Chat with others while watching.</p>
            </div> */ %>
          </div>
          
          <!-- Chat Input Form -->
          <div class="mt-auto">
            <form id="messageForm" class="flex gap-2">
              <input 
                type="text" 
                id="messageInput" 
                placeholder="Type your message..." 
                class="flex-grow bg-nb-light rounded-lg p-3 text-nb-text focus:outline-none focus:ring-2 focus:ring-nb-primary border border-nb-border placeholder-gray-400"
              >
              <button 
                type="submit" 
                class="nb-button px-4 py-2 rounded-lg flex items-center text-white"
                id="messageSendBtn"
              >
                <i class="ri-send-plane-fill mr-1"></i> Send
              </button>
            </form>
          </div>
        </div>
        
        <!-- Collapsed Chat View -->
        <div id="collapsedChatView" class="hidden h-full flex flex-col items-center justify-center p-2">
          <i class="ri-chat-3-line text-2xl mb-5 text-nb-primary"></i>
          <div class="writing-vertical transform rotate-90 text-sm text-nb-text-light whitespace-nowrap">Live Chat</div>
          <div class="mt-4 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs mt-auto mb-4">
            <span id="collapsedActiveUsers">0</span>
          </div>
        </div>
      </div>
    </div>
    <!-- Meeting Join Form -->
    <div id="nonStreamDiv" class="hidden md:flex flex-row md:h-screen items-center">
      <div class="p-8 basis-1/2">
        <div class="max-w-md mx-auto h-full max-h-screen flex flex-col align-center">
          <div class="mb-8">
            <h2 class="mb-1 gradient-text text-4xl font-bold mb-2">Join Meeting</h2>
            <p class="font-normal text-base">Enter the meeting ID to connect</p>
          </div>
          <div class="space-y-4">
            <form action="#" id="joinForm">
              <div class="mb-2">
                <label for="meetingIdControlInput" class="block font-normal text-base mb-2">Meeting ID <sup>*</sup></label>
                <input 
                  type="text" 
                  class="w-full bg-nb-light rounded-lg p-3 text-nb-text focus:outline-none focus:ring-2 focus:ring-nb-primary border border-nb-border" 
                  id="meetingIdControlInput" 
                  placeholder="Enter meeting ID"
                  name="id"
                  required
                >
              </div>

              <div class="mb-2">
                <label for="organizationControlInput" class="block font-normal text-base mb-2">Organization</label>
                <input 
                  type="text" 
                  class="w-full bg-nb-light rounded-lg p-3 text-nb-text focus:outline-none focus:ring-2 focus:ring-nb-primary border border-nb-border" 
                  id="organizationControlInput" 
                  placeholder="Organization"
                  name="organization"
                >
              </div>

              <div class="mb-2">
                <label for="nameControlInput" class="block font-normal text-base mb-2">Your Name <sup>*</sup></label>
                <input 
                  type="text" 
                  class="w-full bg-nb-light rounded-lg p-3 text-nb-text focus:outline-none focus:ring-2 focus:ring-nb-primary border border-nb-border" 
                  id="nameControlInput" 
                  placeholder="Your Name"
                  name="your_name"
                  required
                >
              </div>

              <div class="flex items-center justify-between mt-6">
                <button 
                  class="w-full py-3 bg-black rounded-lg font-medium text-white flex items-center justify-center" 
                  type="submit"
                >
                  <i class="ri-login-circle-line mr-2"></i> Join Meeting
                </button>
              </div>
              <div class="text-center mt-3">
                <span id="meetingStatus" class="text-sm text-nb-text-light"></span>
              </div>
            </form>
          </div>
        </div>
      </div>
      <div  class="basis-1/2 h-screen bg-light relative">
        <%
          if(it.meeting){
        %>
        <div class="blur-sm absolute top-0 left-0 w-full h-screen" style="background-image: url('/img/event-bg.png') "></div>
        <%
          }else {
        %>
        <div class="blur-sm absolute top-0 left-0 w-full h-screen" style="background: #F9FAFB "></div>        
        <%
          }
        %>
        <div class="w-full mx-auto p-12 absolute h-full max-h-screen flex flex-col justify-start items-center">
          <%
            if(it.meeting){
          %>
            <div class="mt-4 md:mt-8">
              <h2 id="meetingTitle" class="text-3xl md:text-5xl font-bold mb-2 text-center capitalize" style="color: #FBE4CB"><%= it.meeting.title %></h2>
              <p id="meetingDescription" class="text-lg md:text-2xl text-white mb-6 capitalize text-center"> <%= it.meeting.description %></p>
            </div>
            <div>
              <div class="border-2 border-white rounded-lg px-4 py-2 mt-12">
                <h2 class="text-sm font-bold mb-2 capitalize text-white"> <span class="color-s">Agenda: </span> <span  id="meetingAgenda"><%= it.meeting.agenda %></span> </h2>              
              </div>
            </div>
            <div class="mt-8 md:mt-auto">
              <h6 class="text-white text-2xl text-center">When:</h6>
              <div class=" grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div class="p-4 rounded-lg border border-nb-border">
                  <span class="text-white text-sm">Start Date:</span>
                  <div id="meetingDate" class="font-semibold text-nb-text" style="color: #F3AB5F;"></div>
                </div>
                <div class=" p-4 rounded-lg border border-nb-border">
                  <span class="text-white text-sm">Start Time:</span>
                  <div id="meetingTime" class="font-semibold text-nb-text"  style="color: #F3AB5F;">-</div>
                </div>
              </div>
              
            </div>
          <%  
            }else {
          %>  
            <div class="pt-12 flex flex-col ">
              <h6 class="text-center font-bold text-4xl color-p mb-4">Welcome !</h6>
              <img src="/img/background.png" class="w-full h-auto mb-4" />
              <h6 class="text-center text-xl color-p">Welcome to NextBroadcastMedia - where media meets innvoation</h6>          
            </div>
          <%
            }
          %>
        </div>
      </div>

    </div>
  </div>

  <div id="meetingInfoModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
      <div class="relative rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 w-full flex justify-center">
        <div>
          <div class="mt-3 sm:mt-5">
            <!-- Meeting Information Section -->
            <div id="meetingInfoSection" class="mb-8 bg-white rounded-xl p-6 max-w-3xl mx-auto border border-nb-border shadow-lg">
              <h2 class="text-xl md:text-4xl text-center font-bold mb-4 gradient-text-s capitalize">Your Event Starts Soon</h2>

              <!-- Improved Countdown Timer -->
              <div id="timeRemainingSection" class="mt-8 text-center">
                <div class="flex justify-center gap-1 md:gap-3 text-center">
                  <div class="countdown-item rounded-xl p-2 md:p-5 w-16 shadow-xl">
                    <span id="remainingDays" class="text-lg md:text-3xl font-bold block gradient-text">00</span>
                    <span class="text-sm color-s mt-1">Days</span>
                  </div>

                  <div class="flex flex-col justify-center align-center">
                    <span class="gradient-text">:</span>
                  </div>

                  <div class="countdown-item rounded-xl p-2 md:p-5 w-16 shadow-xl">
                    <span id="remainingHours" class="text-lg md:text-3xl font-bold block gradient-text">00</span>
                    <span class="text-sm color-s mt-1">Hours</span>
                  </div>

                  <div class="flex flex-col justify-center align-center">
                    <span class="gradient-text">:</span>
                  </div>

                  <div class="countdown-item rounded-xl p-2 md:p-5 w-16 shadow-xl">
                    <span id="remainingMinutes" class="text-lg md:text-3xl font-bold block gradient-text">00</span>
                    <span class="text-sm color-s mt-1">Minutes</span>
                  </div>

                  <div class="flex flex-col justify-center align-center">
                    <span class="gradient-text">:</span>
                  </div>

                  <div class="countdown-item rounded-xl p-2 md:p-5 w-20 shadow-xl">
                    <span id="remainingSeconds" class="text-lg md:text-3xl font-bold block gradient-text">00</span>
                    <span class="text-sm color-s mt-1">Seconds</span>
                  </div>
                </div>              
              </div>
              <div class="flex flex-row mt-8 gap-4 justify-around px-4 md:px-4">
                <div class="max-w-xs  min-w-[150px]">
                  <p class="color-p text-md md:text-2xl font-bold">
                    The meeting will begin automatically when the countdown ends or when it starts.
                  </p>
                  <button 
                    class="px-2 md:px-3 py-2 md:py-3 bg-black mt-4 rounded-md font-medium text-white flex gap-2 items-center justify-center font-base text-sm md:text-lg" 
                    onclick="hideMeetingInfoModal()"                  
                  >
                  
                    <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3.521 7.83331L8.18766 12.5L7.00016 13.6666L0.333496 6.99998L7.00016 0.333313L8.18766 1.49998L3.521 6.16665H13.6668V7.83331H3.521Z" fill="white"/>
                    </svg>
                      Go Back
                  </button>
                </div>
                <div class=" text-end">
                  <img src="/img/pop-logo.png" class="w-auto h-auto" />
                </div>
              </div>
              

            </div>
          </div>
        </div>
      </div>
    </div>
  </div>


  <script>
    // Existing JavaScript
    let meetingId = "<%= it.meeting ? it.meeting.uuid : '' %>";
    let streamUrl = `/live/${meetingId}/index.m3u8`;
    const video = document.getElementById('video');
    const videoContainer = document.getElementById('video-container');
    const status = document.getElementById('status');
    let timer = null, meetingTimer = null, countdownTimer = null;
    let isStreaming = false;
    let meetingData = null;
    let meetingStartTime = null;
    let organization = "";
    let your_name = "";
    const meetingInfoModal = document.getElementById('meetingInfoModal');

    const player = videojs('video');


    // Get additional elements for mobile
    const videoTab = document.getElementById('videoTab');
    const chatTab = document.getElementById('chatTab');
    const mobileActiveUsers = document.getElementById('mobileActiveUsers');
    


    // Chat functionality
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    const chatMessages = document.getElementById('chatMessages');
    const activeUsersElement = document.getElementById('activeUsers');
    const collapsedActiveUsers = document.getElementById('collapsedActiveUsers');
    const toggleChatBtn = document.getElementById('toggleChatBtn');
    const chatSection = document.getElementById('chatSection');
    const chatContent = document.getElementById('chatContent');
    const collapsedChatView = document.getElementById('collapsedChatView');
    const videoSection = document.getElementById('videoSection');
    const chatCollapseIcon = document.getElementById('chatCollapseIcon');
    
    let isChatCollapsed = false;
    let activeUsers = 0; // Initial count
    let socket; // WebSocket connection
    let intervalTimeout = 5000;



    player.on('play', () => {
      if(player.src().endsWith('m3u8')){      
        const seekable = player.seekable();
        if (seekable && seekable.length > 0) {
          const liveEdge = seekable.end(0);
          player.currentTime(liveEdge);
        }
      }
    });


    function showMeetingInfoModal(){
      meetingInfoModal.classList.remove('hidden');
    }

    function hideMeetingInfoModal(){
      meetingInfoModal.classList.add('hidden');
    }


    // Mobile tab switching functions
    function showVideoTab() {
      videoTab.classList.add('tab-active');
      chatTab.classList.remove('tab-active');
      
      // Show video, hide chat on mobile
      if (window.innerWidth < 768) {
        videoSection.classList.remove('hidden');
        chatSection.classList.add('hidden');
      }
    }

    function showChatTab() {
      chatTab.classList.add('tab-active');
      videoTab.classList.remove('tab-active');
      
      // Show chat, hide video on mobile
      if (window.innerWidth < 768) {
        chatSection.classList.remove('hidden');
        videoSection.classList.add('hidden');
      }
    }
    


    // Handle chat collapsing
    toggleChatBtn.addEventListener('click', function() {
      isChatCollapsed = !isChatCollapsed;
      
      if (isChatCollapsed) {
        // Collapse chat
        chatSection.classList.remove('chat-expanded');
        chatSection.classList.add('chat-collapsed');
        chatContent.classList.add('hidden');
        collapsedChatView.classList.remove('hidden');
        videoSection.classList.remove('video-with-chat');
        videoSection.classList.add('video-full', 'md:w-[calc(100%-80px)]');
        chatCollapseIcon.classList.remove('ri-arrow-right-s-line');
        chatCollapseIcon.classList.add('ri-arrow-left-s-line');
        document.getElementById("chatHeader").classList.add("hidden");
      } else {
        // Expand chat
        chatSection.classList.remove('chat-collapsed');
        chatSection.classList.add('chat-expanded');
        chatContent.classList.remove('hidden');
        collapsedChatView.classList.add('hidden');
        videoSection.classList.add('video-with-chat');
        videoSection.classList.remove('video-full', 'md:w-[calc(100%-80px)]');
        videoSection.classList.add('md:w-2/3');
        chatCollapseIcon.classList.add('ri-arrow-right-s-line');
        chatCollapseIcon.classList.remove('ri-arrow-left-s-line');
        document.getElementById("chatHeader").classList.remove("hidden")
      }
    });

    function showStreamDiv(){
        document.getElementById("streamDiv").classList.remove("hidden");
        document.getElementById("nonStreamDiv").classList.add("hidden");    
    }

    function showNonStreamDiv(){
        document.getElementById("streamDiv").classList.add("hidden");
        document.getElementById("nonStreamDiv").classList.remove("hidden");    
    }    

    if(meetingId){
      document.getElementById("meetingIdControlInput").value = meetingId;
    }
    
    showNonStreamDiv();

    // The rest of your JavaScript remains the same
    function getPublicPath(){
      console.log("get public path");
      fetch(`/client/event/public?id=${meetingId}`).then(res => res.json()).then(res => {
        console.log(res);
        if(res.filepath){
          //document.getElementById("video").src = res.filepath;
          player.src({ src: res.filepath });
          player.play().catch(err => {
            console.warn('Autoplay error:', err);
          });
          player.muted(false)

        }
      });
    }

    function checkMeeting(){
      fetch(`/client/event/${meetingId}`)
        .then((res) => res.json())
        .catch((err) => { return {status:"error"} })
        .then((res) => {
          console.log(res);
          if(res["status"] === "error"){
            alert("Meeting not found");

            if(meetingTimer)
              clearInterval(meetingTimer);
            return;
          }
          meetingData = res;
          updateMeetingInfo(res);
          //document.getElementById("nonStreamDiv").classList.add("hidden");
          const status =  parseInt(res['status']);
          if(status == 0){
            console.log("meeting has not yet started");
            //document.getElementById("meetingStatus").innerHTML = `Meeting has not yet started`;
            showMeetingCountdown(res);
            
            // Show meeting info section but hide stream
            //document.getElementById("meetingInfoSection").classList.remove("hidden");
            //document.getElementById("streamDiv").classList.add("hidden");
            //showNonStreamDiv();
          } else if(status == 1) {

            hideMeetingInfoModal();

            if(meetingTimer)
              clearInterval(meetingTimer);
            if(countdownTimer)
              clearInterval(countdownTimer);
            document.getElementById("nonStreamDiv").style.display = "none";
            timer = setInterval(checkStream, intervalTimeout);            
            status.innerText = "";
            videoContainer.classList.remove('hidden');

            // Keep meeting info visible but also show stream
            //document.getElementById("meetingInfoSection").classList.add("hidden");
            //document.getElementById("video").controls = false;
            showStreamDiv();
            getPreviousMessage(false);
            initializeChat(); // Connect to chat when meeting is active
          } else if(status == 2){
            if(meetingTimer)
              clearInterval(meetingTimer);
            if(countdownTimer)
              clearInterval(countdownTimer);
            //document.getElementById("timeRemainingSection").classList.add("hidden");
            // Keep meeting info visible but also show stream
            document.getElementById("nonStreamDiv").style.display = "none";

            //document.getElementById("meetingInfoSection").classList.add("hidden");
            showStreamDiv();
            videoContainer.classList.remove('hidden');
            document.getElementById("streamInfo").classList.add("hidden");
            //document.getElementById("video").controls = true;
            getPublicPath();
            getPreviousMessage(true);            
            <% /* initializeChat(true); // Connect to chat when meeting is recorded */ %>
          }
      })
      .catch(err => {
        console.error("Error fetching meeting data:", err);
      });
    }

    function updateMeetingInfo(data) {


      // Update meeting info elements
      document.getElementById("meetingTitle").textContent = data.title || "Untitled Meeting";
      document.getElementById("meetingTitle2").textContent = data.title || "Untitled Meeting";
      document.getElementById("meetingDescription").textContent = data.description || "No description available";
      document.getElementById("meetingDescription2").textContent = data.description || "No description available";
      document.getElementById("meetingAgenda").textContent = data.agenda || "";
      document.getElementById("meetingAgenda2").textContent = data.agenda || "";
      
      // Add agenda if available
      if (data.agenda) {
        const agendaElement = document.getElementById("meetingAgenda") || document.createElement("p");
        //agendaElement.id = "meetingAgenda";
        //agendaElement.className = "text-gray-600 mt-2";
        //agendaElement.innerHTML = `<strong>Agenda:</strong> ${data.agenda}`;
        
        // If element doesn't exist yet, add it after the description
        if (!document.getElementById("meetingAgenda")) {
          const descriptionElement = document.getElementById("meetingDescription");
          descriptionElement.parentNode.insertBefore(agendaElement, descriptionElement.nextSibling);
        }
      }
      
      // Format and display dates
      if (data.start_date && data.start_time && data.timezone) {
        // Use Luxon to handle timezones
        const { DateTime } = luxon;
        
        // Combine date and time with timezone
        const meetingDateTime = DateTime.fromFormat(
          `${data.start_date} ${data.start_time}:00`, // Add seconds since API doesn't include them
          "yyyy-MM-dd HH:mm:ss", 
          { zone: data.timezone }
        );
        
        // Store for countdown
        meetingStartTime = meetingDateTime;
        
        // Convert to local timezone for display
        const localDateTime = meetingDateTime.toLocal();
        
        // Format for display
        document.getElementById("meetingDate").textContent = localDateTime.toFormat("EEE, MMM d, yyyy");
        document.getElementById("meetingTime").textContent = localDateTime.toFormat("h:mm a") + 
          ` (${localDateTime.offsetNameShort})`;
      } else {
        document.getElementById("meetingDate").textContent = "Not specified";
        document.getElementById("meetingTime").textContent = "Not specified";
      }
    }

    // Existing functions for meeting countdown, etc.
    function showMeetingCountdown(data) {
      //debugger
      // Only proceed if we have valid date/time data
      if (!data.start_date || !data.start_time || !data.timezone) {
        document.getElementById("timeRemainingSection").classList.add("hidden");
        return;
      }
      
      // Always show the countdown section when status is 0 (not started)
      document.getElementById("timeRemainingSection").classList.remove("hidden");
      
      // Create the DateTime object if not already created
      if (!meetingStartTime) {
        const { DateTime } = luxon;
        meetingStartTime = DateTime.fromFormat(
          `${data.start_date} ${data.start_time}:00`, // Add seconds since API doesn't include them
          "yyyy-MM-dd HH:mm:ss", 
          { zone: data.timezone }
        );
      }
      
      // Update countdown immediately
      updateCountdown();
      
      // Set up interval to update countdown
      if (countdownTimer) clearInterval(countdownTimer);
      countdownTimer = setInterval(updateCountdown, 1000);
    }


    function updateCountdown() {
      console.log("update coutn dount");      
      //debugger
      if (!meetingStartTime) return;

      const { DateTime } = luxon;
      const now = DateTime.local();
      
      // Calculate the difference
      const diff = meetingStartTime.diff(now, ['days', 'hours', 'minutes', 'seconds']);
      
      console.log("diff.milliseconds ",diff.milliseconds);
      // If meeting time is in the past, stop countdown and check meeting again
      if (diff.milliseconds <= 0 && diff.minutes <=0 && diff.hours <=0 && diff.days <= 0) {
        clearInterval(countdownTimer);
        //document.getElementById("timeRemainingSection").classList.add("hidden");
        //checkMeeting(); // Check if meeting status has changed
        return;
      }

      if( diff.days > 0 || diff.hours > 0 || diff.minutes > 30 ){
        if(intervalTimeout === 5000){
          intervalTimeout = 10000;
          checkMeetingWithInterval();
        }
      }else {
        if(intervalTimeout === 1000 * 60 * 60){
          intervalTimeout = 5000;
          checkMeetingWithInterval();
        }
      }

      //checkMeetingWithInterval();
      
      // Update the countdown display with padded values
      document.getElementById("remainingDays").textContent = String(Math.floor(diff.days)).padStart(2, '0');
      document.getElementById("remainingHours").textContent = String(Math.floor(diff.hours)).padStart(2, '0');
      document.getElementById("remainingMinutes").textContent = String(Math.floor(diff.minutes)).padStart(2, '0');
      document.getElementById("remainingSeconds").textContent = String(Math.floor(diff.seconds)).padStart(2, '0');
    }

    function checkStream() {

      streamUrl =  location.hostname == "localhost" ? "http://localhost:8080/hls/stream.m3u8" :  "https://livestream.umbrellasolution.in/hls/stream.m3u8";

      //streamUrl = `/live/${meetingId}/index.m3u8`;
      fetch(streamUrl, { method: 'HEAD' })
        .then(res => {
          if (res.ok && !isStreaming) {
            //status.innerText = "";
            videoContainer.classList.remove('hidden');
            startPlayer();
            isStreaming = true;
            clearInterval(timer);
          } else if (!res.ok && isStreaming) {
            //status.innerText = "⚫ Stream ended.";
            videoContainer.classList.add('hidden');
            isStreaming = false;
            clearInterval(timer);
          } else if (!res.ok) {
            //status.innerText = "🔵 Waiting for stream...";
          }
        })
        .catch(err => {
          console.log(err);
          //status.innerText = "⚫ Offline or unreachable.";
          videoContainer.classList.add('hidden');
          isStreaming = false;
        });
    }

    function startPlayer() {
      <% /* if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(streamUrl);
        hls.attachMedia(video);
        hls.config.liveSyncDuration = 3; // Keeps it close to the live edge
        hls.config.maxBufferLength = 5;
        hls.config.maxMaxBufferLength = 10;

        hls.maxBufferSize= 2*1000*1000; // 2MB max buffer size
        hls.maxBufferHole= 0.5;         // Maximum discontinuity
        //liveSyncDuration: 3,        // Stay 3 seconds behind live
        hls.liveMaxLatencyDuration= 10; // Max latency before seeking
        hls.liveDurationInfinity= true; // Treat as a truly live stream
        hls.enableWorker= true;         // Use web worker for better performance
        hls.lowLatencyMode= true;  


        hls.on(Hls.Events.LEVEL_LOADED, function() {
          if(hls.currentLevel >= 0) {
            const details = hls.levels[hls.currentLevel].details;
            if (details && details.live) {
              // Stay close to the live edge
              const targetLatency = 4; // 4 seconds behind live edge
              const currentLiveLatency = hls.latency || 0;
              
              if (currentLiveLatency > targetLatency + 5) {
                // If we're more than 5 seconds beyond our target latency, seek forward
                console.log(`Seeking to catch up to live, latency: ${currentLiveLatency.toFixed(2)}s`);
                video.currentTime = video.duration - targetLatency;
              }
            }
          }
        });
    
      // Store hls instance for later use
      window.hlsPlayer = hls;

      } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.src = streamUrl;
      } */ %>
      //video.src = streamUrl;

      //video.play();
      player.controlBar.playToggle.hide();
      player.src({ src: streamUrl, type: 'application/x-mpegURL' });
      player.play().catch(err => {
        console.warn('Autoplay error:', err);
      });
      player.muted(false)
    }

    // Initialize WebSocket connection for chat
    function initializeChat() {

      // Connect to Socket.IO
      socket = io('/chat');
      
      // Join the meeting room
      socket.emit('join_room', {meetingId, organization, name: your_name});
      
      socket.on('event_ended', () => {
        checkMeeting();
      });

      // Listen for user count updates
      socket.on('users_update', (data) => {
        activeUsers = data.count;
        activeUsersElement.textContent = activeUsers;
        collapsedActiveUsers.textContent = activeUsers;
        mobileActiveUsers.textContent = activeUsers; // Update mobile tab counter
      });


      socket.on("delete_message", (id) => {

        const checkExist = document.getElementById("messageElement" + id);
        if(checkExist){
          checkExist.style.display = "none";
        }

      });
      
      // Listen for chat messages
      socket.on('chat_message', (data) => {
        addChatMessage(data.username, data.message, data.timestamp, data['id']);
        

        <% /* // If chat is collapsed and we receive a message, flash the chat icon
        if (isChatCollapsed) {
          flashChatIcon();
        } */ %>

        // Flash chat tab if we're on video tab
        if (videoTab.classList.contains('tab-active') && window.innerWidth < 768) {
          chatTab.classList.add('animate-pulse', 'text-nb-primary');
          setTimeout(() => {
            chatTab.classList.remove('animate-pulse', 'text-nb-primary');
          }, 2000);
        }
      });
      
      // Handle connection errors
      socket.on('connect_error', () => {
        addSystemMessage("Error connecting to chat");
      });
      
      // Handle disconnection
      socket.on('disconnect', () => {
        addSystemMessage("Disconnected from chat");
      });
      
      // Handle reconnection
      socket.on('reconnect', () => {
        addSystemMessage("Reconnected to chat");
        socket.emit('join_room', meetingId);
      });
    }

    function flashChatIcon() {
      // Flash the chat icon when collapsed and new messages arrive
      const icon = collapsedChatView.querySelector('i');
      icon.classList.add('text-blue-500', 'animate-pulse');
      
      setTimeout(() => {
        icon.classList.remove('text-blue-500', 'animate-pulse');
      }, 2000);
    }


    // Initial setup for mobile
    function setupMobileLayout() {
      if (window.innerWidth < 768) {
        // Start with video tab active
        showVideoTab();
        
        // Remove toggle chat button on mobile
        toggleChatBtn.classList.add('hidden');
      } else {
        // Make sure both are visible on desktop
        videoSection.classList.remove('hidden');
        chatSection.classList.remove('hidden');
        toggleChatBtn.classList.remove('hidden');
      }
    }


    function getPreviousMessage(ended = false){

      if(ended){
        //document.getElementById("messageForm").classList.add("hidden");    
        document.getElementById("messageInput").disabled = true;
        document.getElementById("messageSendBtn").disabled = true;
      }else {
        //document.getElementById("messageForm").classList.remove("hidden");
        document.getElementById("messageInput").disabled = false;
        document.getElementById("messageSendBtn").disabled = false;

      }

      fetch("/client/api/messages/"+meetingId).then((res) => res.json()).then(res => {
        console.log("messages ",res, );
        if(res && res['messages'] && Array.isArray(res['messages']) && res['messages'].length){
          for(let i=0;i<res['messages'].length;i++){
             addChatMessage( res['messages'][i]['name'] ? res['messages'][i]['name'] : res['messages'][i]['user_uid'], res['messages'][i]['message'], new Date(res['messages'][i]['createdAt']), res['messages'][i]['id'])
          }
        }
      });
    }

    // Add a chat message to the UI
    function addChatMessage(username, message, timestamp, id) {
      console.log("addChatMessage ", {username, message, timestamp, id});
      const messageElement = document.createElement('div');
      messageElement.className = 'message bg-zinc-200 p-3 rounded-lg mb-2';
      if(id)
        messageElement.id = 'messageElement'+ id;
      
      const time = new Date(timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
      
      messageElement.innerHTML = `
        <div class="flex items-center justify-between mb-1">
          <span class="font-bold text-blue-400">${username}</span>
          <span class="text-xs text-gray-400">${time}</span>
        </div>
        <p class="break-words">${message}</p>
      `;
      
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Add a system message to the chat
    function addSystemMessage(message) {
      const messageElement = document.createElement('div');
      messageElement.className = 'message bg-zinc-200 p-3 rounded-lg mb-2';
      
      messageElement.innerHTML = `
        <div class="flex items-center gap-2">
          <span class="font-bold text-green-400">System:</span>
        </div>
        <p>${message}</p>
      `;
      
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Handle message form submission
    messageForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const message = messageInput.value.trim();
      if (message && socket && socket.connected) {
        // Send via Socket.IO
        socket.emit('chat_message', { message: message });
        
        // Clear input after sending
        messageInput.value = '';
      }
    });
    
    function checkMeetingWithInterval(){
      console.log(" checkMeetingWithInterval " ,intervalTimeout);
      //debugger
      if(meetingTimer)
        clearInterval(meetingTimer);

      if(meetingId) {
          meetingTimer = setInterval(checkMeeting, intervalTimeout);
      }    
    }

    // Call checkMeeting immediately to show meeting info
    /*if(meetingId) {
      checkMeeting();
      checkMeetingWithInterval();
    }*/

    <%
      if(it.meeting && it.meeting.status == 2){
    %>
      checkMeeting();
    <%
      }
    %>

    document.getElementById("joinForm").addEventListener("submit", (ev) => {
      ev.preventDefault();
      meetingId =  document.getElementById("meetingIdControlInput").value;
      meetingId = meetingId.trim();
      organization = document.getElementById("organizationControlInput").value;
      your_name = document.getElementById("nameControlInput").value;
      checkMeeting();
      checkMeetingWithInterval();
      //document.getElementById("video").muted = false
      showMeetingInfoModal();
    });



    function getMeetingInfo(){

      fetch(`/client/event/${meetingId}`)
        .then((res) => res.json())
        .catch((err) => { return {status:"error"} })
        .then((res) => {
          console.log(res);
          if(res["status"] === "error"){
            //alert("Meeting not found");
            return;
          }
          updateMeetingInfo(res);
        });
    
    }

    <%
      if(it.meeting){
    %>
      getMeetingInfo();
    <%
      }
    %>


    // Run on load and resize
    window.addEventListener('resize', setupMobileLayout);
    setupMobileLayout();
  </script>
</body>
</html>