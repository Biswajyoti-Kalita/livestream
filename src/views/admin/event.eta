<%~ includeFile("partials/header")%>
<%~ includeFile("partials/nav")%>
<%~ includeFile("partials/sidebar", {page: "events"})%>
<%
    const columns = ["Slno", "UUID", "Meeting Link", "Filepath", "Agenda", "Description", "Start Date", "Start Time", "Status", "Action"];
    const limitOptions = [10, 25, 50, 100]; // Options for the limit dropdown
    let currentPage = 1; // Initialize current page
    let totalPages = 1; // Initialize total pages (will be updated by API)
    let limit = limitOptions[0]; // Default limit
%>
<div class="p-4 pt-20 sm:ml-64 bg-gray-700 min-h-screen">
  <form id="searchForm" class="max-w-full mx-auto flex flex-wrap">
    <div class="w-full md:w-auto md mr-2 mb-2">
      <label for="search" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Search</label>
      <input id="search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
    </div>

    <div class="w-full md:w-auto mt-auto mb-2">
      <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Submit</button>
    </div>
  </form>

  <div class="flex justify-between items-center mt-4">
    <span class="text-white font-bold text-lg">Event Table</span>
    <div class="w-full md:w-auto md mr-2 mb-2 flex items-center gap-2">
      <select id="limit" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
      >
        <% limitOptions.forEach(option => { %>
          <option value="<%= option %>" <% if (option === limit) { %>selected<% } %>><%= option %></option>
        <% }); %>
      </select>
      <button type="button" data-modal-target="addFormModal" data-modal-toggle="addFormModal" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Add</button>
    </div>
  </div>

  <div class="content mt-2">
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
      <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-600 dark:text-gray-400">
          <tr>
            <% columns?.map(header => { %>
              <th scope="col" class="px-6 py-3"><%= header %></th>
            <% }); %>
          </tr>
        </thead>
        <tbody id="tableBody">
          <tr>
            <td colspan="<%= columns.length %>">Loading...</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div id="pagination" class="flex justify-center items-center mt-8 mb-4">
      <button id="prevPage" class="px-2 py-2 mx-1 text-sm rounded bg-gray-300 hover:bg-gray-400 disabled:bg-gray-500 disabled:cursor-not-allowed" disabled>&laquo; Prev</button>
      <span id="pageNumbers" class="mx-2 text-sm text-white">Page 1 of 1</span>
      <button id="nextPage" class="px-4 py-2 mx-1 text-sm rounded bg-gray-300 hover:bg-gray-400 disabled:bg-gray-500 disabled:cursor-not-allowed">Next &raquo;</button>
    </div>

  </div>
</div>

<button class="hide" data-modal-target="chatModal" data-modal-toggle="chatModal" id="chatModalBtn"></button>
<div id="chatModal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
    <div class="relative p-4 w-full max-w-2xl max-h-full">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow-sm dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-200">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                    Chat
                </h3>
                <button type="button" id="chatModalCloseBtn" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="chatModal">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                    <span class="sr-only">Close</span>
                </button>
            </div>
            <!-- Modal body -->
            <form id="chat" class="p-4 md:p-5">
              <div class="text-white">
  
                <div id="chatSection" class="w-full bg-gray-800 rounded-lg p-4 flex flex-col h-[500px]">
                  <div class="flex justify-between items-center mb-4">
                    <div class="bg-green-500 text-white px-3 py-1 rounded-full text-sm">
                      <span id="activeUsers">0</span> active
                    </div>
                  </div>
                  
                  <div id="chatMessages" class="flex-grow overflow-y-auto mb-4 space-y-3 p-2">
                    <div class="message bg-gray-700 p-2 rounded-lg">
                      <div class="flex items-center gap-2">
                        <span class="font-bold text-green-400">System:</span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="mt-auto">
                    <form id="messageForm" class="flex gap-2">
                      <input 
                        type="text" 
                        id="messageInput" 
                        placeholder="Type your message..." 
                        class="flex-grow bg-gray-700 rounded-lg p-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                      <button 
                        type="submit" 
                        class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg"
                      >
                        Send
                      </button>
                    </form>
                  </div>
                </div>

              </div>
          </form>
        </div>
    </div>
</div>

<!-- Add modal -->
<div id="addFormModal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
    <div class="relative p-4 w-full max-w-2xl max-h-full">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow-sm dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-200">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                    Add Event
                </h3>
                <button type="button" id="addFormModalCloseBtn" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="addFormModal">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                    <span class="sr-only">Close</span>
                </button>
            </div>
            <!-- Modal body -->
            <form id="addForm" class="p-4 md:p-5">
              <div class="grid gap-4 mb-4 grid-cols-2">
  
                <div class="col-span-2">
                  <label for="addAgenda" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Agenda</label>
                  <input type="text" id="addAgenda" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="agenda" />
                </div>
                <div class="col-span-2">
                  <label for="addTitle" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Title</label>
                  <input type="text" id="addTitle" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Title" required />
                </div>
                <div class="col-span-2">
                  <label for="addDescription" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Description</label>
                  <input type="text" id="addDescription" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Description"  />
                </div>


                <div class="col-span-2">
                  <label for="addStartDate" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Start Date</label>
                  <input type="date" id="addStartDate" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="start date"  />
                </div>


                <div class="col-span-2">
                  <label for="addStartTime" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Start Time</label>
                  <input type="time" id="addStartTime" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="start date"  />
                </div>


                <div class="col-span-2">
                  <label for="addFilePath" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">File</label>
                  <input type="hidden" id="addFilePath" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                  <input type="file" id="addFilePathFile" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                </div>


              </div>
              <button type="submit" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                  Add
              </button>
              <span id="uploadProgress"></span>
          </form>
        </div>
    </div>
</div>



<!-- Edit modal -->
<button class="hide" data-modal-target="editFormModal" data-modal-toggle="editFormModal" id="editFormModalBtn"></button>
<div id="editFormModal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
  <div class="relative p-4 w-full max-w-2xl max-h-full">
      <!-- Modal content -->
      <div class="relative bg-white rounded-lg shadow-sm dark:bg-gray-700">
          <!-- Modal header -->
          <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-200">
              <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                  Edit Event
              </h3>
              <button type="button" id="editFormModalCloseBtn" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="editFormModal">
                  <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                  </svg>
                  <span class="sr-only">Close</span>
              </button>
          </div>
          <!-- Modal body -->
          <form id="editForm" class="p-4 md:p-5">
            <div class="grid gap-4 mb-4 grid-cols-2">
              <div class="col-span-2">
                <label for="editVersion" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Version</label>
                <input type="text" id="editVersion" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Version" required />
              </div>
              <div class="col-span-2">
                  <label for="editDbChanged" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">DB Changed</label>
                  <select type="text" id="editDbChanged" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="db_changed"  >
                    <option value="0">No</option>
                    <option value="1">Yes</option>
                  </select>
              </div>
              <div class="col-span-2">
                <label for="editDescription" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Description</label>
                <textarea id="editDescription" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" /></textarea>
              </div>
            </div>
            <input type="hidden" id="editEventId" value="" />
            <button type="submit" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                edit
            </button>
        </form>
      </div>
  </div>
</div>
  <script src="/socket.io/socket.io.js"></script>


<script>
  const searchInput = document.getElementById("search");
  const tableBody = document.getElementById("tableBody");
  const searchForm = document.getElementById("searchForm");
  const addForm = document.getElementById("addForm");
  const addFormModalCloseBtn = document.getElementById('addFormModalCloseBtn');
  const editForm = document.getElementById("editForm");
  const editFormModalCloseBtn = document.getElementById('editFormModalCloseBtn');
  const editFormModalBtn = document.getElementById('editFormModalBtn');
  const chatModalCloseBtn = document.getElementById('chatModalCloseBtn');
  const chatModalBtn = document.getElementById('chatModalBtn');
  const limitSelect = document.getElementById("limit");
  const pagination = document.getElementById("pagination");
  const prevPageButton = document.getElementById("prevPage");
  const nextPageButton = document.getElementById("nextPage");
  const pageNumbersSpan = document.getElementById("pageNumbers");
  const columns = ["id", "version", "db_changed", "description", "status"];
  let socket = null;

  let currentPage = 1;
  let totalPages = 1;
  let limit = parseInt(limitSelect.value); // Get initial limit value
  const copyIconSVG = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16">
    <path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z"/>
  </svg>`;



  // Chat functionality
  const messageForm = document.getElementById('messageForm');
  const messageInput = document.getElementById('messageInput');
  const chatMessages = document.getElementById('chatMessages');
  const activeUsersElement = document.getElementById('activeUsers');

  async function copyToClipboard(uuid) {
    try {
      const text = `${location.origin}/client/meeting?id=${uuid}`;
      await navigator.clipboard.writeText(text);
      console.log('Text copied to clipboard!');
      // Optionally, provide user feedback here (e.g., a notification)
      document.getElementById(uuid).innerHTML = `${copyIconSVG} copied`;
      setTimeout(() => {
        document.getElementById(uuid).innerHTML = `${copyIconSVG} copy`;
      },1000)

    } catch (err) {
      console.error('Failed to copy text: ', err);
      // Optionally, handle the error and inform the user
      Swal.fire({
        title: "Error!",
        text: err,
        icon: "error"
      });
    }
  }
  
  function getMeetingLink(uuid){

    return `<div>
      <h6>${location.origin}/client/meeting?id=${uuid}</h6>
      <h6>
      <span id="${uuid}" onclick="copyToClipboard('${uuid}')" style="display: flex; gap: 10px;">
        ${copyIconSVG}
        copy
      </span>
    </h6>
    </div>
      `

  }

  async function uploadFileWithProgress(file) {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      const formData = new FormData();
      formData.append('file', file);

      xhr.upload.addEventListener('progress', (event) => {
        if (event.lengthComputable) {
          const percentComplete = (event.loaded / event.total) * 100;
          console.log(`Upload progress: ${percentComplete.toFixed(2)}%`);
          document.getElementById("uploadProgress").innerHTML = `Uploading file ${percentComplete}%`
          // You can update your UI here to show the progress
        }
      });

      xhr.onload = () => {
        if (xhr.status >= 200 && xhr.status < 300) {
          resolve(xhr.responseText);
        } else {
          reject(new Error(`File upload failed with status ${xhr.status}`));
        }
      };

      xhr.onerror = () => {
        reject(new Error('Network error during file upload'));
      };

      xhr.open('POST', '/admin/api/upload'); // Replace with your upload endpoint
      xhr.send(formData);
    });
  }


  function deleteEvent(id){
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
      customClass: {
        popup: "swal2-dark"
      }
    }).then((result) => {
      if (result.isConfirmed) {
          const url = `/admin/api/event?id=`+id;
          fetch(url, {
            method:"DELETE",
            headers: { "content-type": "application/json" }
          })
          .then(res => res.json())
          .then(res => {
            Swal.fire({
              title: "Deleted!",
              text: "Your file has been deleted.",
              icon: "success"
            });
            fetchData();
          });
      }
    });
  }

  function fetchData() {
    const url = `/admin/api/events?search=${searchInput.value}&offset=${currentPage-1}&limit=${limit}`;

    tableBody.innerHTML = `<tr><td class="text-center py-2" colspan="<%= columns.length %>">Loading...</td></tr>`; // Loading message

    fetch(url, {
      headers: { "content-type": "application/json" }
    })
    .then(res => res.json())
    .then(res => {
      if (res && res.rows && res.rows.length > 0) { //check if data is available
        tableBody.innerHTML = ''; // Clear loading message
        res.rows.forEach((app,index) => {
            tableBody.innerHTML += `
                <tr class="bg-slate-${index%2 == 0 ? '': '700'} hover:bg-slate-800">
                    <td class="px-6 py-3">${index + 1}</td>
                    <td class="px-6 py-3">${app['uuid'] ? app['uuid'] : ''}</td>
                    <td class="px-6 py-3">${getMeetingLink(app['uuid'])}</td>                    
                    <td class="px-6 py-3">${app['filepath'] ? app['filepath'] : ''}</td>
                    <td class="px-6 py-3">${app['agenda'] ? app['agenda'] : ''}</td>
                    <td class="px-6 py-3">${app['description'] ? app['description'] : ''}</td>
                    <td class="px-6 py-3">${app['start_date'] ? app['start_date'] : ''}</td>
                    <td class="px-6 py-3">${app['start_time'] ? app['start_time'] : ''}</td>
                    <td class="px-6 py-3">${ ['Pending','In-progress','Completed'][app['status']] }</td>
                    <td class="px-6 py-3">
                      <button class="mx-2 p-2 cursor-p" style="display: contents;" onclick="startEvent(${app['id']})">Start Event</button>
                      <button class="mx-2 p-2 cursor-p" onclick="startChat(${app['id']})">Chat</button>
                      <button class="mx-2 p-2 cursor-p" onclick="editEvent(${app['id']})">Edit</button>
                      <button class="mx-2 p-2 cursor-p" onclick="deleteEvent(${app['id']})">Delete</button>
                    </td>
                </tr>
            `;
        });

        totalPages = Math.ceil(res.count/parseInt(limitSelect.value)); // Update total pages
        updatePagination();

      } else {
        tableBody.innerHTML = `<tr><td class="text-center py-2" colspan="<%= columns.length %>">No data found.</td></tr>`;
        totalPages = 1; // Reset to 1 if no data
        updatePagination();
      }
    })
    .catch(error => {
      console.error("Error fetching data:", error);
      tableBody.innerHTML = `<tr><td colspan="<%= columns.length %>">Error fetching data.</td></tr>`;
    });
  }

  function startEvent(id){
    const url = `/admin/api/startevent?id=`+id;
    fetch(url, {
      method:"POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify({
        id
      })
    })
    .then(res => res.json())
    .then(res => {
      fetchData();
    })
  }
    let meetingId = null;

    function initializeChat() {
      getPreviousMessage();
      getActiveUsers();
      // Connect to Socket.IO
      
      socket = io('/chat');
      
      // Join the meeting room
      socket.emit('join_room', meetingId);
      
      // Listen for user count updates
      socket.on('users_update', (data) => {
        activeUsers = data.count;
        activeUsersElement.textContent = activeUsers;
      });
      
      // Listen for chat messages
      socket.on('chat_message', (data) => {
        addChatMessage(data.username, data.message, data.timestamp);
      });
      
      // Handle connection errors
      socket.on('connect_error', () => {
        addSystemMessage("Error connecting to chat");
      });
      
      // Handle disconnection
      socket.on('disconnect', () => {
        addSystemMessage("Disconnected from chat");
      });
      
      // Handle reconnection
      socket.on('reconnect', () => {
        addSystemMessage("Reconnected to chat");
        socket.emit('join_room', meetingId);
      });
    }

    // Add a system message to the chat
    function addSystemMessage(message) {
      const messageElement = document.createElement('div');
      messageElement.className = 'message bg-gray-700 p-3 rounded-lg mb-2';
      
      messageElement.innerHTML = `
        <div class="flex items-center gap-2">
          <span class="font-bold text-green-400">System:</span>
        </div>
        <p>${message}</p>
      `;
      
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function getPreviousMessage(){
      fetch("/client/api/messages/"+meetingId).then((res) => res.json()).then(res => {
        console.log("messages ",res, );
        if(res && res['messages'] && Array.isArray(res['messages']) && res['messages'].length){
          for(let i=0;i<res['messages'].length;i++){
             addChatMessage(res['messages'][i]['user_uid'], res['messages'][i]['message'], new Date(res['messages'][i]['createdAt']))
          }
        }
      });
    }


    function getActiveUsers(){
      fetch("/client/api/active-users/"+meetingId).then((res) => res.json()).then(res => {
        console.log("active users ",res,  res['count']);
        activeUsers = res['count'];
        activeUsersElement.textContent =  res['count'];
      });
    }


    // Add a chat message to the UI
    function addChatMessage(username, message, timestamp) {
      console.log("addChatMessage ", {username, message, timestamp});
      const messageElement = document.createElement('div');
      messageElement.className = 'message bg-gray-700 p-2 rounded-lg';
      
      const time = new Date(timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
      
      messageElement.innerHTML = `
        <div class="flex items-center justify-between">
          <span class="font-bold text-blue-400">${username}</span>
          <span class="text-xs text-gray-400">${time}</span>
        </div>
        <p>${message}</p>
      `;
      
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Handle message form submission
    messageForm?.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const message = messageInput.value.trim();
      if (message && socket && socket.connected) {
        // Send via Socket.IO
        socket.emit('chat_message', { message: message });
        
        // Clear input after sending
        messageInput.value = '';
      }
    });    

  function startChat(id) {
    chatModalBtn.click();
    chatMessages.innerHTML = '';
    activeUsers = 0;
    activeUsersElement.textContent = activeUsers;
    const url = `/admin/api/event?id=`+id;
    fetch(url, {
      method:"GET",
      headers: { "content-type": "application/json" }
    })
    .then(res => res.json())
    .then(res => {
      if(res){
        if(res["status"] == "error"){
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: res["message"]
          });
        }else {
          meetingId = res['uuid'];
          initializeChat();
        }
      }
    });

  }

  function editEvent(id) {
    editFormModalBtn.click();
    const url = `/admin/api/event?id=`+id;
    fetch(url, {
      method:"GET",
      headers: { "content-type": "application/json" }
    })
    .then(res => res.json())
    .then(res => {
      if(res){
        if(res["status"] == "error"){
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: res["message"]
          });
        }else {
          document.getElementById("editEventId").value = id;
          document.getElementById("editVersion").value = res["version"];
          document.getElementById("editDbChanged").value = res["db_changed"];
          document.getElementById("editDescription").value = res["description"];
        }
      }
    });

  }

  addForm.addEventListener("submit", async (ev) => {
    ev.preventDefault();
    const url = `/admin/api/event`;
    const fileInput = document.getElementById("addFilePathFile");
    document.getElementById("uploadProgress").innerHTML = "";

    if(fileInput.value){

      // Get the file from the input
      const file = fileInput.files[0];
      if (file) {
        const formData = new FormData();
        formData.append('file', file);
        /*
        const result = await fetch('/admin/api/upload', {
          method: 'POST',
          body: formData
        }).then(res => res.json());
        */
        let result = await uploadFileWithProgress(file).then(res => JSON.parse(res));

        console.log({result});
        if(result && result.filepath){
          fileInput.value = "";
          document.getElementById("addFilePath").value = result.filepath;
        }
      }

    }



    fetch(url, {
      method:"POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify({
        agenda: document.getElementById("addAgenda").value,
        title: document.getElementById("addTitle").value,
        description: document.getElementById("addDescription").value,
        start_date: document.getElementById("addStartDate").value,
        start_time: document.getElementById("addStartTime").value,
        filepath: document.getElementById("addFilePath").value,
      })
    })
    .then(res => res.json())
    .then(res => {
        if(res.status == "error"){
          Swal.fire({
            title: "Error!",
            text: res.message || "Something went wrong",
            icon: "error"
          });
      document.getElementById("uploadProgress").innerHTML = "";
      return;
    }

      Swal.fire({
        title: "Added!",
        text: "Event added successfully",
        icon: "success"
      });
      clearFieldData("addAgenda");
      clearFieldData("addTitle");
      clearFieldData("addDescription");
      clearFieldData("addStartDate");
      clearFieldData("addStartTime");
      clearFieldData("addTaddFilePathitle");
      addFormModalCloseBtn.click();
      fetchData();
    });
  });


  editForm.addEventListener("submit", (ev) => {
    ev.preventDefault();
    const id = document.getElementById("editEventId").value
    const url = `/admin/api/event?id=` + id;
    fetch(url, {
      method:"PUT",
      headers: { "content-type": "application/json" },
      body: JSON.stringify({
        version: document.getElementById("editVersion").value,
        db_changed: +document.getElementById("editDbChanged").value,
        description: document.getElementById("editDescription").value,
      })
    })
    .then(res => res.json())
    .then(res => {
    if(res.status == "error"){
      Swal.fire({
        title: "Error!",
        text: res.message || "Something went wrong",
        icon: "error"
      });
      return;
    }
      Swal.fire({
        title: "Updated!",
        text: "Event updated successfully",
        icon: "success"
      });
      clearFieldData("editVersion");
      clearFieldData("editName");
      editFormModalCloseBtn.click();
      fetchData();
    });
  });


  searchForm.addEventListener("submit", (ev) => {
    ev.preventDefault();
    currentPage = 1; // Reset to first page on new search
    fetchData();
  });

  limitSelect.addEventListener('change', () => {
    limit = parseInt(limitSelect.value);
    currentPage = 1; // Reset to first page on limit change
    fetchData();
  });

  prevPageButton.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      fetchData();
    }
  });

  nextPageButton.addEventListener('click', () => {
    if (currentPage < totalPages) {
      currentPage++;
      fetchData();
    }
  });

  function updatePagination() {
      pageNumbersSpan.textContent = `Page ${currentPage} of ${totalPages}`;
      prevPageButton.disabled = currentPage <= 1;
      nextPageButton.disabled = currentPage >= totalPages;
  }

  window.onload = () => {
    fetchData(); // Initial data load
  };

</script>

<%~ includeFile("partials/footer")%>